// Add this JavaScript to track usage limits class UsageTracker { constructor() { this.maxFreeGenerations = 5; this.storageKey = 'showNotesUsage'; } getUsage() { const usage = localStorage.getItem(this.storageKey); return usage ? JSON.parse(usage) : { count: 0, firstUse: null, isPaid: false }; } canGenerate() { const usage = this.getUsage(); return usage.isPaid || usage.count < this.maxFreeGenerations; } recordGeneration() { const usage = this.getUsage(); if (!usage.firstUse) { usage.firstUse = new Date().toISOString(); } usage.count += 1; localStorage.setItem(this.storageKey, JSON.stringify(usage)); // Track milestone gtag('event', 'usage_milestone', { 'generation_count': usage.count, 'is_paid': usage.isPaid }); return usage; } getRemainingGenerations() { const usage = this.getUsage(); if (usage.isPaid) return 'Unlimited'; return Math.max(0, this.maxFreeGenerations - usage.count); } showUpgradePrompt() { const remaining = this.getRemainingGenerations(); if (remaining === 0) { this.displayUpgradeModal(); return true; } return false; } displayUpgradeModal() { const modal = document.createElement('div'); modal.className = 'upgrade-modal'; modal.innerHTML = `
ðŸš€ Ready to unlock unlimited show notes?
You've used all 5 free generations!

Upgrade to Creator Plan - â‚¬9/month
Maybe Later
`; document.body.appendChild(modal); // Track upgrade prompt shown gtag('event', 'upgrade_prompt_shown', { 'trigger': 'limit_reached' }); } } // Initialize usage tracker const usageTracker = new UsageTracker(); // Update your generate function function updateGenerateFunction() { const originalGenerate = window.generateShowNotes; window.generateShowNotes = function() { if (!usageTracker.canGenerate()) { usageTracker.showUpgradePrompt(); return; } // Record the generation const usage = usageTracker.recordGeneration(); // Update UI to show remaining generations updateUsageDisplay(usage); // Call original function return originalGenerate.apply(this, arguments); }; } function updateUsageDisplay(usage) { const remaining = usageTracker.getRemainingGenerations(); const usageEl = document.getElementById('usage-display') || createUsageDisplay(); if (usage.isPaid) { usageEl.innerHTML = 'âœ¨ Unlimited generations'; usageEl.className = 'usage-display premium'; } else { usageEl.innerHTML = `${remaining} free generations remaining`; usageEl.className = remaining <= 2 ? 'usage-display warning' : 'usage-display'; } } function createUsageDisplay() { const display = document.createElement('div'); display.id = 'usage-display'; display.className = 'usage-display'; document.querySelector('.container').insertBefore(display, document.querySelector('.generate-section')); return display; } // Initialize on page load document.addEventListener('DOMContentLoaded', function() { updateGenerateFunction(); updateUsageDisplay(usageTracker.getUsage()); });